"===============================================================================
" Ken Vim configuration file
"===============================================================================

" Basic setups even before additional plugins are loaded
set nocompatible                " be iMproved, required


" Allow syntax highlighting
syntax on                       
filetype  on                     " required
set t_Co=256
" 
" set term=screen-256color        " enable 256 color in console mode
"set path+=**

" Disable Ex mode 
nnoremap Q <Nop>

" Set favourite colos
"colorscheme desktop_custom


" If working in light environment
" set background=light
" colorscheme PaperColor

" Disables reading other .vimrc like files. It is set due to security reasons.
" For more info, see :help noexrc.
" 
" set noexrc
" Install vim-plug if not already installed
 
" Plugins ----------{{{
set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plug 'VundleVim/Vundle.vim'

" Vim-Commentary
Plug 'tpope/vim-commentary'

" Github Co-Pilot
Plug 'github/copilot.vim'

" Physics-based scrolling
Plug 'yuttie/comfortable-motion.vim'

" AirLine plugin
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" LaTeX prlugin
Plug 'lervag/vimtex'

" undotree to show changes of the file
Plug 'mbbill/undotree'

" fugitive plugin to see git status and branches via airline
" Plugin 'tpope/vim-fugitive'

" Tagbar to help move around tags created by ctag
Plug 'majutsushi/tagbar'

" If working in an environment with lot of additional light in it
" Plugin 'NLKNguyen/papercolor-theme'

" vim gutentagas, Automatic ctags file handler
Plug 'ludovicchabant/vim-gutentags'

" snipMATE -- for easy snippet support
" Plugin 'msanders/snipmate.vim'

" Plugin 'vim-syntastic/syntastic'
Plug 'rhysd/vim-clang-format'
" Autoformat python with black
Plug 'averms/black-nvim'

" PLugins needed to natively run clangd with lsp -- based on Jonas Devlieghere
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/vim-lsp-settings'

Plug 'dense-analysis/ale'

Plug 'davidhalter/jedi-vim'

" Plugin 'jalvesaq/Nvim-R'
Plug 'jpalardy/vim-slime'
Plug 'hanschen/vim-ipython-cell'

" Extra plugins for PlantUML sigramms
" Plugin 'scrooloose/vim-slumlord'
" Plugin 'aklt/plantuml-syntax'
" Mermaid plugings
" Plugin 'zhaozg/vim-diagram'
" Plugin 'vim-pandoc/vim-pandoc'
" Plugin 'vim-pandoc/vim-pandoc-syntax'

Plug 'JuliaEditorSupport/julia-vim'

" All of your Plugins must be added before the following line
call plug#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" }}}
" AirLine setup ------{{{
set laststatus=2
set t_Co=256
set ttimeoutlen=50  
let g:airline_theme='dark'
" let g:airline_theme='light'
let g:airline_powerline_fonts=0
let g:airline#extensions#virtualenv#enabled = 1
let g:ariline#extensions#tabline#enabled=1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#fnamemod = ':.'
let g:airline#extensions#wordcount#enabled = 0
let g:airline_detect_spell=1
let g:airline_section_z = airline#section#create(['%3p%%', ':%3v'])
let g:airline_section_warning=''
let g:airline_section_error=''

" Recomended setup for Syntastic.
"let g:airline#extensions#syntastic#enabled = 1
"let g:syntastic_python_checkers = ['pylint']
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_c_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_exec = 'cpplint'
" The following two lines are optional. Configure it to your liking!
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" }}}

" YouCompleteMe setups -----------{{{
" Allows every filetype to be used with YCM
" let g:ycm_filetype_whitelist = { 'python': 1, }
" let g:ycm_filetype_blacklist = { 'tex':1, 'markdown':1}
" let g:ycm_extra_conf_cim_data = []
" let g:ycm_show_diagnostics_ui=1
" let g:ycm_collect_identifiers_from_tags_files = 1
" let g:ycm_confirm_extra_conf = 1
" let g:ycm_register_as_syntastic_checker = 1
" let g:ycm_disable_for_files_larger_than_kb = 10000
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_filetype_specific_completion_to_disable = {'tex':1}
" let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_auto_trigger = 1

" let g:ycm_global_ycm_extra_conf = '.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" Setup for python3+ check and completion
" let g:ycm_python_binary_path = '/usr/bin/python'

" Let vertical split help window
" JEDI-vim confifurations
 " let g:jedi#use_tabs_not_buffers = 1
" disable clangd server
" let g:ycm_use_clangd = 0

" }}}

" VIMTEX setups ----------{{{
"
au BufNewFile,BufRead *.tikz set filetype=tex
let g:vimtex_quickfix_enabled = 0
let g:vimtex_view_general_viewer = 'atril'
let g:vimtex_compiler_latexmk_engines = {'pdflatex'         : '-pdf'}
let g:vimtex_compiler_latexmk = { 'background' : 1, 'build_dir' : './build/', 'callback' : 1, 'continuous' : 1, 'executable' : 'latexmk', 'options' : [ '-shell-escape', '-verbose', '-file-line-error', '-synctex=1', '-interaction=nonstopmode', '-pdf', '-pvc', ], }
let g:vimtex_view_skim_activate=1

autocmd FileType tex :NoMatchParen
au FileType tex setlocal nocursorline
au BufNewFile,BufRead *.tikz set filetype=tex
au BufNewFile,BufRead *.tex set filetype=tex
" In case of not enough information to decide, fail for latex
let g:tex_flavor = "latex"

" }}}

" Undotree setup --- {{{ Undotree
if has("persistent_undo")
    set undodir=$HOME.".vim/.undodir"
        set undofile
    endif

" relative timestamp
if !exists('g:undotree_RelativeTimestamp')
    let g:undotree_RelativeTimestamp = 1
endif

" Highlight changed text
if !exists('g:undotree_HighlightChangedText')
    let g:undotree_HighlightChangedText = 1
endif

"}}}

" Setup for NETRW ----- {{{
" Just to have som view on the files used on projects
" let g:netrw_banner = 0
" let g:netrw_winsize = 20
" let g:netrw_browse_split = 4
" let g:netrw_liststyle = 3
"}}}

" Movement steups ------{{{            

" Let j k behave on line not on paraghraph
nnoremap j gj
nnoremap k gk

" Do the same in visual mode
vnoremap j gj
vnoremap k gk

" kill the arrowkeys
nnoremap <left> <nop>
vnoremap <left> <nop>
inoremap <left> <nop>

nnoremap <right> <nop>
vnoremap <right> <nop>
inoremap <right> <nop>

nnoremap <up> <nop>
vnoremap <up> <nop>
inoremap <up> <nop>

nnoremap <down> <nop>
vnoremap <down> <nop>
inoremap <down> <nop>

" Jump to the end of screen of the current line
nnoremap L g$
vnoremap L g$

" Jump to the beginning of the screen of the current line 
nnoremap H g0
vnoremap H g0

" better movement between windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Remaps in normal mode to change buffer
nnoremap <TAB> :bn<ESC>
nnoremap <S-TAB> :bp<ESC>
" }}}

" Uncategorized setups -----{{{

" Save or update when hitting the enter in normal mode
" let fts=['py']
" if index(fts, &filetype) == -1
	" nnoremap <ENTER> :w<ENTER>
" endif
nmap <ENTER> :wa<ENTER>


" Tab size setup
" show existing tab with 4 spaces width
set tabstop=4
" When indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" Put extra information into the main line
set wildmenu

" Highligth search 
set hlsearch
" Show search result on the fiy
set incsearch
" Setup for Smart case sensitive search
set ignorecase
set smartcase

" Repeate function in visula mode setup
vnoremap . :normal . <cr>   

" Let's reload file automatically which modified outside vim
set autoread

" Set soft wrap at the line ending
set wrap linebreak nolist

" setup of shortmess
set shortmess+=c
set shortmess+=I
set shortmess+=t
set shortmess+=T
set shortmess+=s

" Line numbering setup
set number
highlight LineNr ctermfg=gray
" Set numbering to relative
set relativenumber

" Set undo to persistent
if has("persistent_undo")
    set undodir=~/.vim/undodir/
    set undofile
endif

" Backup files settings -- *.swp handling and storage.
" See :help backup for these settings
set nobackup
set writebackup

"}}}

" Mapping from the Learn Vimscript the hard way fantasy book -----{{{


" Puts the current line 1 line belove
nnoremap - ddp
" Puts the current line 1 line above
nnoremap _ dd2kp

" Set the leader, change later if you find some better
let mapleader = "\\"

" edit .vimrc fast in a horizontaly split window
noremap <leader>ev :vsplit ~/.vimrc<CR> 

" apply the the current vimrc setup
nnoremap <leader>sv :source ~/.vimrc<CR>

" put quote around the the current word
nnoremap <leader>" viw<ESC>a"<ESC>bi"<ESC>lel
"}}}

" Mappings for Function keys: <Fx> ----------{{{
nnoremap <F2> :noh<CR>

" Reset the ctags file on the current diretory
nnoremap <F3> :call ResetCtags()<CR>

" Puts the current time to the cursre
nnoremap <F4> :r !today<CR>

" Used to test the colorscheme file during developement
" nnoremap <F6> :! sudo cp -v ~/progs/tools/dotfiles/color_theme/console_custom.vim /usr/share/vim/vim80/colors/ <CR>

" Insert current time - hours: minutes: ms
nnoremap <F9> :r !now<CR>

" Close the current buffer,
" TODO rewrite it so it could be used with a N as a
" prefix, and it closes N buffer
nnoremap <F10> :bdelete<CR>

"}}}

" Language spell checks --------{{{
augroup check_lang
    autocmd!
     autocmd BufWritePost *.md :setlocal spell spelllang=en_us
     autocmd BufWritePost *.tex :setlocal spell spelllang=en_us
augroup END
"}}}

" Use the same comment on different files -------------------{{{
augroup comment
    autocmd!
    autocmd FileType vim nnoremap <buffer> <localleader>c 0i"<space><ESC>
    autocmd FileType python nnoremap <buffer> <localleader>c 0i#<space><ESC>
    autocmd FileType c nnoremap <buffer> <localleader>c 0i//<space><ESC>
    autocmd FileType h nnoremap <buffer> <localleader>c 0i//<space><ESC>
    autocmd FileType cpp nnoremap <buffer> <localleader>c 0i//<space><ESC>
    autocmd FileType sh nnoremap <buffer> <localleader>c 0i#<space><ESC>
    autocmd FileType tex nnoremap <buffer> <localleader>c 0i%<space><ESC>
    autocmd FileType matlab nnoremap <buffer> <localleader>c 0i%<space><ESC>
    autocmd FileType markdown nnoremap <buffer> <localleader>c 0i[//]:# <space><ESC>

    " set keycommand to uncomment a line based on the filetype
    autocmd FileType vim nnoremap <buffer> <localleader><S-c> 0xx<ESC>
    autocmd FileType python nnoremap <buffer> <localleader><S-c> 0xx<ESC>
    autocmd FileType c nnoremap <buffer> <localleader><S-c> 0xxx<ESC>
    autocmd FileType h nnoremap <buffer> <localleader><S-c> 0xxx<ESC>
    autocmd FileType cpp nnoremap <buffer> <localleader><S-c> 0xxx<ESC>
    autocmd FileType sh nnoremap <buffer> <localleader><S-c> 0xx<ESC>
    autocmd FileType tex nnoremap <buffer> <localleader><S-c> 0xx<ESC>
    autocmd FileType matlab nnoremap <buffer> <localleader><S-c> 0xx<ESC>
    autocmd FileType markdown nnoremap <buffer> <localleader>c 0xxxxxx <space><ESC>
augroup END
" }}}

" Markdown specific mappings ------------{{{
augroup Markdown
    autocmd!
    autocmd FileType markdown nnoremap <buffer> <localleader><s-h> yypVr=
    autocmd FileType markdown nnoremap <buffer> <localleader>h yypVr-
    noremap <F5> :!pandoc -s -o %:r.pdf %:r.md ; atril %:r.pdf&<CR><CR>
    noremap <F12> :!mmdc -i % -o %:r.png<CR><CR>
augroup END
" }}}

" Vimscript file settings ----------{{{ 
augroup FileType_vim
    autocmd!
    " Auto folding for *.vim files
    autocmd FileType vim setlocal foldmethod=marker
augroup end
" }}}

" Python file settings ------- {{{ Python files
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix
au BufNewFile,BufRead *.py set encoding=utf-8
" }}}

autocmd Filetype python nnoremap <ENTER> :Black<cr>:wa<cr>

let g:loaded_python_provider = 0
let g:python3_host_prog = '/usr/bin/python3'

" ALE configuration ----- {{{ Ale Config
let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 1
let g:ale_virtualtext_cursor = "error"
let g:ale_cpp_cc_options = "std=c++20 -Wall -Weffc++ -pedantic"
set omnifunc=ale#completion#OmniFunc


" }}}

" SnipMate Configuration ------- {{{{{ SnipMAte
"
" Snippet instertion is at the most useless -- alt-tab combination...
ino <a-tab> <c-r>=TriggerSnippet()<cr>
snor <a-tab> <esc>i<right><c-r>=TriggerSnippet()<cr>
" }}}}}

if executable('texlab')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'texlab',
        \ 'cmd': {server_info->['texlab']},
        \ 'whitelist': ['tex', 'bib', 'sty'],
        \ })
endif

" For clangd support
if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
        autocmd FileType c setlocal omnifunc=lsp#complete
        autocmd FileType cpp setlocal omnifunc=lsp#complete
        autocmd FileType objc setlocal omnifunc=lsp#complete
        autocmd FileType objcpp setlocal omnifunc=lsp#complete
    augroup end
endif

" autocmd FileType cpp let b:vmc_tab_complete = "omni"
set omnifunc=syntaxcomplete#Complete

let g:lsp_highlight_references_enabled = 1
let g:lsp_diagnostics_enabled = 0
let g:lsp_async_completion = 1

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

let g:clang_format#auto_format = 1
let g:clang_format#code_style = "llvm"


if executable('clangd')
    augroup lsp_cpp
    " nice configurations for lsp support
        " This should serve for better completion handling --> tab and shift tab,
        inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
        inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
        " Useful function to hotkeys
        noremap <F1> :LspHover<CR>
        noremap <leader>d :LspDefinition<CR>
        noremap <leader>e :LspNextDiagnostic<CR>
        noremap <leader>r :LspRename<CR>
        noremap <leader>p :LspPeekDefinition<CR>
        noremap <leader>t :LspAddTreeCallHierarchyIncoming<CR>
        noremap <leader>f :LspReferences<CR>
        noremap <leader>n :cnext<CR>
        noremap <leader>N :cNext<CR>
    augroup end
endif

" compile for plantuml
autocmd BufNewFile,BufRead *.puml noremap <F5> :! plantuml -tlatex ./% && cp -v ./%:r.latex ./%:r.tex <CR><CR>

" This should serve for better completion handling --> tab and shift tab,
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"



" setting for ipython
" Use tmux
let g:slime_target = 'x11'

" fix paste issues in ipython
let g:slime_python_ipython = 1
let g:slime_dont_ask_default = 1

nnoremap <A-ENTER> :SlimeSend<CR>

" Additional setting for neovim
set guicursor=

"Scrolling settings
let g:comfortable_motion_scroll_down_key = 'j'
let g:comfortable_motion_scroll_up_key = 'k'
let g:comfortable_motion_friction = 70
let g:comfortable_motion_air_drag = 2.8

"=========================== Function used in this file ========================

" Function to reset ctags, inside the caller directory ------------------{{{
" For me, the .generateTags.vim file has teh following two rows:
"   let @x = system("rm -v tags")
"   let @y = system("ctags -R ./src")
"
" I keep the tags file in the project directory, and open vim from there, 
" and keep the source files in './src', the header files in the './src/inc'.
function! ResetCtags( )
    if filereadable(".generateTags.vim")
        source .generateTags.vim
    else
        echom "Generator file is missing!"
    endif
endfunction

" }}}






